// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/test.proto

#ifndef PROTOBUF_proto_2ftest_2eproto__INCLUDED
#define PROTOBUF_proto_2ftest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_2ftest_2eproto();
void protobuf_AssignDesc_proto_2ftest_2eproto();
void protobuf_ShutdownFile_proto_2ftest_2eproto();

class test;

// ===================================================================

class test : public ::google::protobuf::Message {
 public:
  test();
  virtual ~test();

  test(const test& from);

  inline test& operator=(const test& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const test& default_instance();

  void Swap(test* other);

  // implements Message ----------------------------------------------

  test* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const test& from);
  void MergeFrom(const test& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 i32 = 1;
  inline bool has_i32() const;
  inline void clear_i32();
  static const int kI32FieldNumber = 1;
  inline ::google::protobuf::int32 i32() const;
  inline void set_i32(::google::protobuf::int32 value);

  // optional uint32 u32 = 2;
  inline bool has_u32() const;
  inline void clear_u32();
  static const int kU32FieldNumber = 2;
  inline ::google::protobuf::uint32 u32() const;
  inline void set_u32(::google::protobuf::uint32 value);

  // optional int64 i64 = 3;
  inline bool has_i64() const;
  inline void clear_i64();
  static const int kI64FieldNumber = 3;
  inline ::google::protobuf::int64 i64() const;
  inline void set_i64(::google::protobuf::int64 value);

  // optional uint64 u64 = 4;
  inline bool has_u64() const;
  inline void clear_u64();
  static const int kU64FieldNumber = 4;
  inline ::google::protobuf::uint64 u64() const;
  inline void set_u64(::google::protobuf::uint64 value);

  // optional string str = 5;
  inline bool has_str() const;
  inline void clear_str();
  static const int kStrFieldNumber = 5;
  inline const ::std::string& str() const;
  inline void set_str(const ::std::string& value);
  inline void set_str(const char* value);
  inline void set_str(const char* value, size_t size);
  inline ::std::string* mutable_str();
  inline ::std::string* release_str();
  inline void set_allocated_str(::std::string* str);

  // repeated int32 ivec = 6;
  inline int ivec_size() const;
  inline void clear_ivec();
  static const int kIvecFieldNumber = 6;
  inline ::google::protobuf::int32 ivec(int index) const;
  inline void set_ivec(int index, ::google::protobuf::int32 value);
  inline void add_ivec(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ivec() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ivec();

  // @@protoc_insertion_point(class_scope:test)
 private:
  inline void set_has_i32();
  inline void clear_has_i32();
  inline void set_has_u32();
  inline void clear_has_u32();
  inline void set_has_i64();
  inline void clear_has_i64();
  inline void set_has_u64();
  inline void clear_has_u64();
  inline void set_has_str();
  inline void clear_has_str();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 i32_;
  ::google::protobuf::uint32 u32_;
  ::google::protobuf::int64 i64_;
  ::google::protobuf::uint64 u64_;
  ::std::string* str_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ivec_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2ftest_2eproto();
  friend void protobuf_AssignDesc_proto_2ftest_2eproto();
  friend void protobuf_ShutdownFile_proto_2ftest_2eproto();

  void InitAsDefaultInstance();
  static test* default_instance_;
};
// ===================================================================


// ===================================================================

// test

// optional int32 i32 = 1;
inline bool test::has_i32() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void test::set_has_i32() {
  _has_bits_[0] |= 0x00000001u;
}
inline void test::clear_has_i32() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void test::clear_i32() {
  i32_ = 0;
  clear_has_i32();
}
inline ::google::protobuf::int32 test::i32() const {
  return i32_;
}
inline void test::set_i32(::google::protobuf::int32 value) {
  set_has_i32();
  i32_ = value;
}

// optional uint32 u32 = 2;
inline bool test::has_u32() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void test::set_has_u32() {
  _has_bits_[0] |= 0x00000002u;
}
inline void test::clear_has_u32() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void test::clear_u32() {
  u32_ = 0u;
  clear_has_u32();
}
inline ::google::protobuf::uint32 test::u32() const {
  return u32_;
}
inline void test::set_u32(::google::protobuf::uint32 value) {
  set_has_u32();
  u32_ = value;
}

// optional int64 i64 = 3;
inline bool test::has_i64() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void test::set_has_i64() {
  _has_bits_[0] |= 0x00000004u;
}
inline void test::clear_has_i64() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void test::clear_i64() {
  i64_ = GOOGLE_LONGLONG(0);
  clear_has_i64();
}
inline ::google::protobuf::int64 test::i64() const {
  return i64_;
}
inline void test::set_i64(::google::protobuf::int64 value) {
  set_has_i64();
  i64_ = value;
}

// optional uint64 u64 = 4;
inline bool test::has_u64() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void test::set_has_u64() {
  _has_bits_[0] |= 0x00000008u;
}
inline void test::clear_has_u64() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void test::clear_u64() {
  u64_ = GOOGLE_ULONGLONG(0);
  clear_has_u64();
}
inline ::google::protobuf::uint64 test::u64() const {
  return u64_;
}
inline void test::set_u64(::google::protobuf::uint64 value) {
  set_has_u64();
  u64_ = value;
}

// optional string str = 5;
inline bool test::has_str() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void test::set_has_str() {
  _has_bits_[0] |= 0x00000010u;
}
inline void test::clear_has_str() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void test::clear_str() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    str_->clear();
  }
  clear_has_str();
}
inline const ::std::string& test::str() const {
  return *str_;
}
inline void test::set_str(const ::std::string& value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void test::set_str(const char* value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void test::set_str(const char* value, size_t size) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* test::mutable_str() {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  return str_;
}
inline ::std::string* test::release_str() {
  clear_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_;
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void test::set_allocated_str(::std::string* str) {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (str) {
    set_has_str();
    str_ = str;
  } else {
    clear_has_str();
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 ivec = 6;
inline int test::ivec_size() const {
  return ivec_.size();
}
inline void test::clear_ivec() {
  ivec_.Clear();
}
inline ::google::protobuf::int32 test::ivec(int index) const {
  return ivec_.Get(index);
}
inline void test::set_ivec(int index, ::google::protobuf::int32 value) {
  ivec_.Set(index, value);
}
inline void test::add_ivec(::google::protobuf::int32 value) {
  ivec_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
test::ivec() const {
  return ivec_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
test::mutable_ivec() {
  return &ivec_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2ftest_2eproto__INCLUDED
