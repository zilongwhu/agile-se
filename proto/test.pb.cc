// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/test.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* test_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  test_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2ftest_2eproto() {
  protobuf_AddDesc_proto_2ftest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/test.proto");
  GOOGLE_CHECK(file != NULL);
  test_descriptor_ = file->message_type(0);
  static const int test_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, i32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, u32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, i64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, u64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, ivec_),
  };
  test_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      test_descriptor_,
      test::default_instance_,
      test_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(test));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2ftest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    test_descriptor_, &test::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2ftest_2eproto() {
  delete test::default_instance_;
  delete test_reflection_;
}

void protobuf_AddDesc_proto_2ftest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020proto/test.proto\"U\n\004test\022\013\n\003i32\030\001 \001(\005\022"
    "\013\n\003u32\030\002 \001(\r\022\013\n\003i64\030\003 \001(\003\022\013\n\003u64\030\004 \001(\004\022\013"
    "\n\003str\030\005 \001(\t\022\014\n\004ivec\030\006 \003(\005", 105);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/test.proto", &protobuf_RegisterTypes);
  test::default_instance_ = new test();
  test::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2ftest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2ftest_2eproto {
  StaticDescriptorInitializer_proto_2ftest_2eproto() {
    protobuf_AddDesc_proto_2ftest_2eproto();
  }
} static_descriptor_initializer_proto_2ftest_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int test::kI32FieldNumber;
const int test::kU32FieldNumber;
const int test::kI64FieldNumber;
const int test::kU64FieldNumber;
const int test::kStrFieldNumber;
const int test::kIvecFieldNumber;
#endif  // !_MSC_VER

test::test()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void test::InitAsDefaultInstance() {
}

test::test(const test& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void test::SharedCtor() {
  _cached_size_ = 0;
  i32_ = 0;
  u32_ = 0u;
  i64_ = GOOGLE_LONGLONG(0);
  u64_ = GOOGLE_ULONGLONG(0);
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

test::~test() {
  SharedDtor();
}

void test::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void test::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* test::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return test_descriptor_;
}

const test& test::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2ftest_2eproto();
  return *default_instance_;
}

test* test::default_instance_ = NULL;

test* test::New() const {
  return new test;
}

void test::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    i32_ = 0;
    u32_ = 0u;
    i64_ = GOOGLE_LONGLONG(0);
    u64_ = GOOGLE_ULONGLONG(0);
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
  }
  ivec_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool test::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 i32 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &i32_)));
          set_has_i32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_u32;
        break;
      }

      // optional uint32 u32 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_u32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &u32_)));
          set_has_u32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_i64;
        break;
      }

      // optional int64 i64 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_i64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &i64_)));
          set_has_i64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_u64;
        break;
      }

      // optional uint64 u64 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_u64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &u64_)));
          set_has_u64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_str;
        break;
      }

      // optional string str = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ivec;
        break;
      }

      // repeated int32 ivec = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ivec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_ivec())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ivec())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ivec;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void test::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 i32 = 1;
  if (has_i32()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->i32(), output);
  }

  // optional uint32 u32 = 2;
  if (has_u32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->u32(), output);
  }

  // optional int64 i64 = 3;
  if (has_i64()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->i64(), output);
  }

  // optional uint64 u64 = 4;
  if (has_u64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->u64(), output);
  }

  // optional string str = 5;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->str(), output);
  }

  // repeated int32 ivec = 6;
  for (int i = 0; i < this->ivec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->ivec(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* test::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 i32 = 1;
  if (has_i32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->i32(), target);
  }

  // optional uint32 u32 = 2;
  if (has_u32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->u32(), target);
  }

  // optional int64 i64 = 3;
  if (has_i64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->i64(), target);
  }

  // optional uint64 u64 = 4;
  if (has_u64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->u64(), target);
  }

  // optional string str = 5;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->str(), target);
  }

  // repeated int32 ivec = 6;
  for (int i = 0; i < this->ivec_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->ivec(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int test::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 i32 = 1;
    if (has_i32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->i32());
    }

    // optional uint32 u32 = 2;
    if (has_u32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->u32());
    }

    // optional int64 i64 = 3;
    if (has_i64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->i64());
    }

    // optional uint64 u64 = 4;
    if (has_u64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->u64());
    }

    // optional string str = 5;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

  }
  // repeated int32 ivec = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->ivec_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ivec(i));
    }
    total_size += 1 * this->ivec_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void test::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const test* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const test*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void test::MergeFrom(const test& from) {
  GOOGLE_CHECK_NE(&from, this);
  ivec_.MergeFrom(from.ivec_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_i32()) {
      set_i32(from.i32());
    }
    if (from.has_u32()) {
      set_u32(from.u32());
    }
    if (from.has_i64()) {
      set_i64(from.i64());
    }
    if (from.has_u64()) {
      set_u64(from.u64());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void test::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void test::CopyFrom(const test& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool test::IsInitialized() const {

  return true;
}

void test::Swap(test* other) {
  if (other != this) {
    std::swap(i32_, other->i32_);
    std::swap(u32_, other->u32_);
    std::swap(i64_, other->i64_);
    std::swap(u64_, other->u64_);
    std::swap(str_, other->str_);
    ivec_.Swap(&other->ivec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata test::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = test_descriptor_;
  metadata.reflection = test_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
